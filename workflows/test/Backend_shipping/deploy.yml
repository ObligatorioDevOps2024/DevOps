name: Build and Deploy Docker Image to ECR

on:
  push:
    branches:
      - test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v2

      # Paso 2: Configurar AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      # Paso 3: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Paso 4: Iniciar sesión en Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Paso 5: Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test-shipping:latest .

      # Paso 6: Subir la imagen a ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test-shipping:latest

      # Paso 7: Configurar kubectl
      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # Paso 8: Desplegar en EKS
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s-deployment.yaml

      # Paso 9: Aplicar el servicio para exponer la aplicación
      - name: Expose service to EKS
        run: |
          kubectl apply -f shipping-service.yaml
